require('dotenv').config();
const TelegramBot = require('node-telegram-bot-api');
const { getDatabase } = require('./config/database');
const { StoryProtocolMonitor } = require('./services/storyMonitor');
const { WhaleMonitor } = require('./services/whaleMonitor');

console.log('üöÄ Starting Story Monitor Bot - REAL DATA ONLY...');

// Check if bot token exists
if (!process.env.BOT_TOKEN) {
    console.error('‚ùå BOT_TOKEN missing! Add your bot token to .env file');
    process.exit(1);
}

let bot;
let db;
let storyMonitor;
let whaleMonitor;

// Add these functions before initializeBot()
function formatTokenAnalysis(analysis) {
    if (!analysis) {
        return "‚ùå No analysis data available for this token";
    }

    let message = `üìä **Token Analysis**\n\n`;

    if (analysis.firstTenMinutes) {
        const tenMin = analysis.firstTenMinutes;
        message += `**First 10 Minutes:**\n`;
        message += `‚Ä¢ Transactions: ${tenMin.txCount || 0}\n`;
        message += `‚Ä¢ Unique Wallets: ${tenMin.uniqueWallets?.size || 0}\n`;
        message += `‚Ä¢ Total Volume: $${(tenMin.totalVolume || 0).toLocaleString()}\n`;
        message += `‚Ä¢ Avg TX Size: $${Math.round(tenMin.avgTxSize || 0)}\n\n`;
    }

    if (analysis.launchPhase) {
        message += `**Launch Phase:** ${analysis.launchPhase}\n`;
    }

    if (analysis.whaleEntryPattern) {
        message += `**Whale Pattern:** ${analysis.whaleEntryPattern}\n`;
    }

    return message;
}

function formatTokenCalendar(calendar) {
    if (!calendar) {
        return "‚ùå No calendar data available for this token";
    }

    let message = `üìÖ **Token Calendar**\n\n`;
    message += `**Launch Time:** ${new Date(calendar.launch_time).toLocaleString()}\n\n`;

    if (calendar.milestones && Object.keys(calendar.milestones).length > 0) {
        message += `**Market Cap Milestones:**\n`;

        Object.entries(calendar.milestones)
            .sort(([a], [b]) => parseInt(a) - parseInt(b))
            .forEach(([milestone, data]) => {
                message += `‚Ä¢ $${parseInt(milestone).toLocaleString()}: ${new Date(data.reached_at).toLocaleString()}\n`;
                if (data.time_from_launch) {
                    message += `  ‚îî Time: ${data.time_from_launch}\n`;
                }
            });
    } else {
        message += "No milestones reached yet\n";
    }

    return message;
}

// Enhanced error handling for database calls
async function safeDbCall(dbMethod, ...args) {
    try {
        if (typeof dbMethod === 'function') {
            return await dbMethod.apply(db, args);
        } else {
            console.error('‚ùå Database method not found');
            return null;
        }
    } catch (error) {
        console.error('‚ùå Database call failed:', error.message);
        return null;
    }
}

async function initializeBot() {
    try {
        // Initialize database
        console.log('üìä Initializing database...');
        db = await getDatabase();

        // Create bot instance
        bot = new TelegramBot(process.env.BOT_TOKEN, {polling: true});

        // Initialize Story Protocol monitoring
        console.log('üîç Initializing Story monitoring...');
        storyMonitor = new StoryProtocolMonitor(db);
        const rpcConnected = await storyMonitor.initialize();

        // Initialize Whale monitoring
        console.log('üêã Initializing Whale monitoring...');
        whaleMonitor = new WhaleMonitor(db, storyMonitor);
        await whaleMonitor.initialize(storyMonitor.provider);

        if (rpcConnected) {
            console.log('‚úÖ Story Protocol RPC connected');

            // Start monitoring after a 5 second delay
            setTimeout(() => {
                storyMonitor.startMonitoring(bot);
                whaleMonitor.startWhaleMonitoring(bot);
            }, 5000);
        } else {
            console.log('‚ö†Ô∏è  Story Protocol monitoring disabled (RPC connection failed)');
        }

        // Handle /start command
        bot.onText(/\/start/, async (msg) => {
            const chatId = msg.chat.id;
            const userId = msg.from.id;
            const userName = msg.from.first_name || 'Anonymous';
            const username = msg.from.username || null;

            console.log(`üì± /start from ${userName} (${userId})`);

            try {
                // Save/update user in database
                await db.createUser(userId, chatId, username);
                console.log(`‚úÖ User ${userId} registered/updated`);

                const welcomeMsg = `
üéØ **Story Protocol Monitor Bot**

Witaj ${userName}! Jeste≈õ teraz zarejestrowany dla alert√≥w.

**Dostƒôpne Komendy:**
/start - Rejestracja/poka≈º tƒô wiadomo≈õƒá
/status - Sprawd≈∫ ustawienia alert√≥w  
/users - Poka≈º liczbƒô zarejestrowanych u≈ºytkownik√≥w
/newips - Poka≈º ostatnie tworzenie IP
/monitor - Sprawd≈∫ status monitorowania
/whale [kwota] - Ustaw pr√≥g alertu whale (domy≈õlnie 40 IP)
/whales - Poka≈º ostatnie transakcje whales
/whalesettings - ZarzƒÖdzaj ustawieniami whales
/analyze [adres] - Szczeg√≥≈Çowa analiza tokenu
/calendar [adres] - Kalendarz prog√≥w market cap
/exclude [adres] [pow√≥d] - Wyklucz token z alert√≥w
/excluded - Lista wykluczonych token√≥w
/test - Test po≈ÇƒÖczenia z bazƒÖ danych
/help - Pe≈Çna lista komend

üöÄ Monitorowanie Story Protocol jest AKTYWNE!
Otrzymasz alerty w czasie rzeczywistym dla nowych IP assets i whale transakcji! üí∞

‚ö° **Real-time Blockchain Monitoring** - Bez danych testowych!
        `;

                bot.sendMessage(chatId, welcomeMsg, {parse_mode: 'Markdown'});

            } catch (error) {
                console.error('‚ùå Error handling /start:', error);
                bot.sendMessage(chatId, '‚ùå B≈ÇƒÖd rejestracji u≈ºytkownika. Spr√≥buj ponownie.');
            }
        });

        // Handle /whale command
        bot.onText(/\/whale(?:\s+(\d+))?/, async (msg, match) => {
            const chatId = msg.chat.id;
            const userId = msg.from.id;
            const threshold = match[1] ? parseInt(match[1]) : null;

            if (!threshold) {
                const currentThreshold = whaleMonitor.getUserWhaleThreshold(userId);
                bot.sendMessage(chatId, `
üêã **Ustawienia Alert√≥w Wieloryb√≥w**

**Aktualny pr√≥g:** ${currentThreshold} IP

**U≈ºycie:** \`/whale [kwota]\`
**Przyk≈Çad:** \`/whale 100\` (alerty dla transakcji ‚â• 100 IP)

**Zalecane progi:**
- 40 IP - Wszystkie wieloryby
- 100 IP - ≈örednie wieloryby  
- 500 IP - Du≈ºe wieloryby
- 1000 IP - Mega wieloryby

üî• **Specjalny bonus:** Otrzymasz dodatkowe alerty dla nowo utworzonych token√≥w (ostatnie 4h)!
        `, {parse_mode: 'Markdown'});
                return;
            }

            if (threshold < 1 || threshold > 100000) {
                bot.sendMessage(chatId, '‚ùå Podaj pr√≥g miƒôdzy 1 a 100,000 IP');
                return;
            }

            try {
                if (typeof db.updateUserWhaleThreshold === 'function') {
                    await db.updateUserWhaleThreshold(userId, threshold);
                } else {
                    console.error('‚ùå Method updateUserWhaleThreshold not found in database');
                    // Fallback - u≈ºyj bezpo≈õredniego SQL query
                    await db.db.run(
                        'UPDATE users SET whale_threshold = ?, updated_at = CURRENT_TIMESTAMP WHERE user_id = ?',
                        [threshold, userId]
                    );
                }

                await whaleMonitor.setUserWhaleThreshold(userId, threshold);

                bot.sendMessage(chatId, `üêã Pr√≥g alertu wieloryba ustawiony na ${threshold} IP token√≥w!`);

            } catch (error) {
                console.error('‚ùå Error setting whale threshold:', error);
                bot.sendMessage(chatId, '‚ùå B≈ÇƒÖd ustawiania progu wieloryba. Spr√≥buj ponownie.');
            }
        });

        // Handle /whales command - REAL DATA ONLY
        bot.onText(/\/whales/, async (msg) => {
            const chatId = msg.chat.id;

            try {
                bot.sendMessage(chatId, 'üîç Pobieranie ostatnich transakcji whales...');

                // Use real database query instead of mock data
                const recentWhales = await db.getRecentWhaleTransactions(24);

                if (recentWhales.length === 0) {
                    bot.sendMessage(chatId, `
üìä **Transakcje whales (24h)**

Nie znaleziono whale transakcji w ciƒÖgu ostatnich 24 godzin.

Monitorowanie jest aktywne - otrzymasz alerty gdy whales bƒôdƒÖ aktywne! üöÄ
      `);
                    return;
                }

                let message = `üêã **Transakcje whales (24h): ${recentWhales.length}**\n\n`;

                recentWhales.slice(0, 10).forEach((whale, index) => {
                    const emoji = whale.transaction_type === 'buy' ? 'üí∞' :
                        whale.transaction_type === 'sell' ? 'üí∏' : 'üîÑ';
                    const action = whale.transaction_type?.toUpperCase() || 'TRANSFER';

                    message += `**${index + 1}.** ${emoji} ${action}\n`;
                    message += `**Kwota:** ${whale.amount?.toLocaleString() || 'Unknown'} tokens\n`;
                    message += `**Token:** ${whale.token_name || 'Unknown Token'}\n`;
                    message += `**Hash:** \`${whale.hash}\`\n`;
                    message += `**Czas:** ${new Date(whale.timestamp).toLocaleString()}\n\n`;
                });

                if (recentWhales.length > 10) {
                    message += `...i ${recentWhales.length - 10} wiƒôcej`;
                }

                bot.sendMessage(chatId, message, {parse_mode: 'Markdown'});

            } catch (error) {
                console.error('‚ùå Error getting whale transactions:', error);
                bot.sendMessage(chatId, '‚ùå B≈ÇƒÖd pobierania danych whales. Spr√≥buj p√≥≈∫niej.');
            }
        });

        // Handle /whalesettings command
        bot.onText(/\/whalesettings/, async (msg) => {
            const chatId = msg.chat.id;
            const userId = msg.from.id;

            try {
                const user = await db.getUser(userId);
                const currentThreshold = user ? user.whale_threshold : 40;
                const whaleStats = whaleMonitor.getMonitoringStats();

                const settingsMsg = `
üêã **Ustawienia Monitorowania whales**

**Tw√≥j pr√≥g alert√≥w:** ${currentThreshold} IP
**Status monitorowania:** ${whaleStats.isMonitoring ? '‚úÖ AKTYWNE' : '‚ùå NIEAKTYWNE'}
**Monitorowane tokeny:** ${whaleStats.monitoredTokens} (nowo utworzone)
**Tryb:** ${whaleStats.mode}

**üî• Specjalne funkcje:**
- Alerty dla token√≥w utworzonych w ostatnich 4h
- Priorytet dla nowych projekt√≥w IP
- ≈öledzenie wzorc√≥w whales

**Zmie≈Ñ ustawienia:**
/whale [kwota] - Ustaw nowy pr√≥g
/whale 40 - Wszystkie whales
/whale 100 - ≈örednie whales
/whale 500 - Du≈ºe whales

**Ostatnia aktywno≈õƒá:** ${whaleStats.isMonitoring ? 'Monitorowanie aktywne' : 'Brak aktywno≈õci'}
        `;

                bot.sendMessage(chatId, settingsMsg, {parse_mode: 'Markdown'});

            } catch (error) {
                console.error('‚ùå Error getting whale settings:', error);
                bot.sendMessage(chatId, '‚ùå B≈ÇƒÖd pobierania ustawie≈Ñ. Spr√≥buj ponownie.');
            }
        });

        // Handle /status command
        bot.onText(/\/status/, async (msg) => {
            const chatId = msg.chat.id;
            const userId = msg.from.id;

            try {
                const user = await db.getUser(userId);

                if (!user) {
                    bot.sendMessage(chatId, '‚ùå U≈ºytkownik nie znaleziony. Wy≈õlij /start najpierw.');
                    return;
                }

                const whaleThreshold = user.whale_threshold || 40;

                const statusMsg = `
üìä **Status Twoich Alert√≥w**

**ID U≈ºytkownika:** ${user.user_id}
**Pr√≥g whale:** ${whaleThreshold} IP
**Alerty IP:** ${user.ip_alerts ? '‚úÖ W≈ÅƒÑCZONE' : '‚ùå WY≈ÅƒÑCZONE'}
**Alerty Burn:** ${user.burn_alerts ? '‚úÖ W≈ÅƒÑCZONE' : '‚ùå WY≈ÅƒÑCZONE'}
**Alerty whales:** ‚úÖ W≈ÅƒÑCZONE
**Zarejestrowano:** ${new Date(user.created_at).toLocaleDateString()}

**üêã Monitorowanie whales:**
- Nowe tokeny IP (ostatnie 4h)
- Transakcje ‚â• ${whaleThreshold} IP
- Priorytetowe alerty dla fresh token√≥w

Ustawienia wyglƒÖdajƒÖ dobrze! üöÄ
        `;

                bot.sendMessage(chatId, statusMsg, {parse_mode: 'Markdown'});

            } catch (error) {
                console.error('‚ùå Error getting user status:', error);
                bot.sendMessage(chatId, '‚ùå B≈ÇƒÖd pobierania statusu. Spr√≥buj ponownie.');
            }
        });

        // Enhanced /analyze command for detailed token analysis
        bot.onText(/\/analyze\s+(.+)/, async (msg, match) => {
            const chatId = msg.chat.id;
            const tokenAddress = match[1].trim();

            try {
                bot.sendMessage(chatId, 'üîç Analyzing token...');
                const analysis = await whaleMonitor.getDetailedTokenAnalysis(tokenAddress);
                const formattedAnalysis = formatTokenAnalysis(analysis);

                bot.sendMessage(chatId, formattedAnalysis, {
                    parse_mode: 'Markdown'
                });
            } catch (error) {
                console.error('‚ùå Error analyzing token:', error);
                bot.sendMessage(chatId, '‚ùå Error analyzing token');
            }
        });

        // Command to exclude tokens
        bot.onText(/\/exclude\s+(.+)\s+(.+)/, async (msg, match) => {
            const chatId = msg.chat.id;
            const tokenAddress = match[1].trim();
            const reason = match[2].trim();

            try {
                await db.excludeToken(tokenAddress, 'Manual Exclusion', reason);
                bot.sendMessage(chatId, `üö´ Token ${tokenAddress} excluded: ${reason}`);
            } catch (error) {
                console.error('‚ùå Error excluding token:', error);
                bot.sendMessage(chatId, '‚ùå Error excluding token');
            }
        });

        // Command to list excluded tokens
        bot.onText(/\/excluded/, async (msg) => {
            const chatId = msg.chat.id;

            try {
                const excluded = await db.getExcludedTokens();

                let message = `üö´ **Excluded Tokens (${excluded.length})**\n\n`;

                excluded.slice(0, 10).forEach((token, index) => {
                    message += `**${index + 1}.** ${token.token_name || 'Unknown'}\n`;
                    message += `Address: \`${token.address}\`\n`;
                    message += `Reason: ${token.reason}\n`;
                    message += `Excluded: ${new Date(token.excluded_at).toLocaleDateString()}\n\n`;
                });

                if (excluded.length > 10) {
                    message += `...and ${excluded.length - 10} more tokens`;
                }

                bot.sendMessage(chatId, message, {parse_mode: 'Markdown'});
            } catch (error) {
                console.error('‚ùå Error getting excluded tokens:', error);
                bot.sendMessage(chatId, '‚ùå Error getting excluded tokens');
            }
        });

        // Command to check database version
        bot.onText(/\/dbversion/, async (msg) => {
            const chatId = msg.chat.id;

            try {
                const version = await db.getSchemaVersion();
                bot.sendMessage(chatId, `üìä Database schema version: ${version}`);
            } catch (error) {
                console.error('‚ùå Error checking database version:', error);
                bot.sendMessage(chatId, '‚ùå Error checking database version');
            }
        });

        // /calendar command for mcap progression
        bot.onText(/\/calendar\s+(.+)/, async (msg, match) => {
            const chatId = msg.chat.id;
            const tokenAddress = match[1].trim();

            try {
                bot.sendMessage(chatId, 'üìÖ Getting token calendar...');
                const calendar = await whaleMonitor.getTokenCalendar(tokenAddress);
                const formatted = formatTokenCalendar(calendar);

                bot.sendMessage(chatId, formatted, {parse_mode: 'Markdown'});
            } catch (error) {
                console.error('‚ùå Error getting token calendar:', error);
                bot.sendMessage(chatId, '‚ùå Error getting token calendar');
            }
        });

        // Handle /users command
        bot.onText(/\/users/, async (msg) => {
            const chatId = msg.chat.id;

            try {
                const users = await db.getAllUsers();
                const totalUsers = users.length;

                bot.sendMessage(chatId, `üë• **≈ÅƒÖcznie zarejestrowanych u≈ºytkownik√≥w:** ${totalUsers}\n\nGotowi na alerty Story Protocol! üöÄ`);

            } catch (error) {
                console.error('‚ùå Error getting users:', error);
                bot.sendMessage(chatId, '‚ùå B≈ÇƒÖd pobierania liczby u≈ºytkownik√≥w.');
            }
        });

        // Handle /test command
        bot.onText(/\/test/, async (msg) => {
            const chatId = msg.chat.id;

            try {
                // Test database by getting recent IPs
                const recentIPs = await db.getRecentIPs(24);
                const whaleStats = whaleMonitor.getMonitoringStats();

                bot.sendMessage(chatId, `
üß™ **Wyniki Testu Systemu**

‚úÖ Po≈ÇƒÖczenie z bazƒÖ danych: Dzia≈Ça
‚úÖ Rejestracja u≈ºytkownik√≥w: Dzia≈Ça  
üìä Ostatnie IP (24h): ${recentIPs.length}
üêã Monitorowanie whales: ${whaleStats.isMonitoring ? 'AKTYWNE' : 'NIEAKTYWNE'}
üì° Monitorowane tokeny: ${whaleStats.monitoredTokens}

Baza danych gotowa do monitorowania! üöÄ
        `, {parse_mode: 'Markdown'});

            } catch (error) {
                console.error('‚ùå Database test error:', error);
                bot.sendMessage(chatId, '‚ùå Test bazy danych nieudany. Sprawd≈∫ logi.');
            }
        });

        // Handle /newips command
        bot.onText(/\/newips/, async (msg) => {
            const chatId = msg.chat.id;

            try {
                bot.sendMessage(chatId, 'üîç Pobieranie ostatnich kreacji IP...');

                const recentIPs = await storyMonitor.getRecentIPs(24);

                if (recentIPs.length === 0) {
                    bot.sendMessage(chatId, `
üìä **Ostatnie IP Assets (24h)**

Nie znaleziono nowych IP assets w ciƒÖgu ostatnich 24 godzin.

Monitorowanie jest aktywne - otrzymasz alerty gdy nowe IP bƒôdƒÖ utworzone! üöÄ
      `);
                    return;
                }

                let message = `üìä **Ostatnie IP Assets (24h): ${recentIPs.length}**\n\n`;

                recentIPs.slice(0, 10).forEach((ip, index) => {
                    message += `**${index + 1}.** ${ip.name}\n`;
                    message += `Adres: \`${ip.address}\`\n`;
                    message += `Tw√≥rca: \`${ip.creator}...\`\n`;
                    message += `Poda≈º: ${ip.initial_supply?.toLocaleString() || 'Nieznana'}\n`;
                    message += `Utworzono: ${new Date(ip.created_at).toLocaleString()}\n\n`;
                });

                if (recentIPs.length > 10) {
                    message += `...i ${recentIPs.length - 10} wiƒôcej`;
                }

                bot.sendMessage(chatId, message, {parse_mode: 'Markdown'});

            } catch (error) {
                console.error('‚ùå Error getting recent IPs:', error);
                bot.sendMessage(chatId, '‚ùå B≈ÇƒÖd pobierania danych IP. Spr√≥buj p√≥≈∫niej.');
            }
        });

        // Handle /monitor command
        bot.onText(/\/monitor/, async (msg) => {
            const chatId = msg.chat.id;

            const storyStatus = storyMonitor && storyMonitor.isMonitoring ? '‚úÖ AKTYWNY' : '‚ùå NIEAKTYWNY';
            const whaleStatus = whaleMonitor && whaleMonitor.isMonitoring ? '‚úÖ AKTYWNY' : '‚ùå NIEAKTYWNY';
            const whaleStats = whaleMonitor.getMonitoringStats();

            bot.sendMessage(chatId, `
üîç **Status Monitora Story Protocol**

**Status IP:** ${storyStatus}
**Status whales:** ${whaleStatus}
**Monitorowanie:** Tworzenie nowych IP + transakcje whales
**Interwa≈Ç sprawdzania:** Co 30 sekund
**Baza danych:** ${db ? '‚úÖ Po≈ÇƒÖczona' : '‚ùå Roz≈ÇƒÖczona'}

**üêã Monitorowanie whales:**
- Monitorowane nowe tokeny: ${whaleStats.monitoredTokens}
- Tryb: ${whaleStats.mode}
- Okno czasowe: 4 godziny dla nowych token√≥w

Otrzymasz alerty dla:
- üÜï Tworzenia nowych IP assets
- üêã whale transakcji (powy≈ºej Twojego progu)
- üî• Priorytetowych alert√≥w dla fresh token√≥w
- üìä Informacji o poda≈ºach i tw√≥rcach
- üîó Bezpo≈õrednich link√≥w do Storyscan

Zosta≈Ñ w gotowo≈õci na alpha! üöÄ
  `, {parse_mode: 'Markdown'});
        });

        // Handle /help command - UPDATED
        bot.onText(/\/help/, async (msg) => {
            const chatId = msg.chat.id;

            const helpMsg = `
üìñ **Pomoc - Story Protocol Bot**

**üéØ Podstawowe Komendy:**
/start - Rejestracja i menu g≈Ç√≥wne
/help - Ta lista komend
/status - Tw√≥j status alert√≥w
/users - Liczba u≈ºytkownik√≥w

**üìä Monitorowanie IP Assets:**
/newips - Najnowsze tokeny IP (24h)
/monitor - Status systemu monitorowania
/test - Test po≈ÇƒÖcze≈Ñ systemowych

**üêã Alerty whales:**
/whale [kwota] - Ustaw pr√≥g alert√≥w (np. /whale 100)
/whales - Ostatnie transakcje whales
/whalesettings - ZarzƒÖdzaj ustawieniami whales

**üîç Analiza i ZarzƒÖdzanie:**
/analyze [adres] - Szczeg√≥≈Çowa analiza tokenu
/calendar [adres] - Kalendarz prog√≥w market cap
/exclude [adres] [pow√≥d] - Wyklucz token z alert√≥w
/excluded - Lista wykluczonych token√≥w
/dbversion - Wersja bazy danych

**üî• Specjalne Funkcje:**
- **Fresh Token Priority** - Dodatkowe alerty dla token√≥w utworzonych w ostatnich 4h
- **whale Transakcje** - Konfigurowalne progi (domy≈õlnie 40 IP)
- **Real-time Monitoring** - Alerty w czasie rzeczywistym
- **Smart Filtering** - Inteligentne filtrowanie szumu

**üí° Pro Tips:**
- Ustaw /whale 40 dla wszystkich whales
- ≈öwie≈ºe tokeny (4h) majƒÖ wy≈ºszy priorytet
- Wszystkie linki prowadzƒÖ do Storyscan
- Bot dzia≈Ça 24/7

**üöÄ Przyk≈Çady:**
\`/whale 50\` - Alerty dla transakcji ‚â• 50 IP
\`/analyze 0x123...\` - Analiza konkretnego tokenu
\`/exclude 0x123... spam token\` - Wyklucz spam token
\`/calendar 0x123...\` - Poka≈º progi market cap

Potrzebujesz pomocy? Napisz do @story_monitor_support
        `;

            bot.sendMessage(chatId, helpMsg, {parse_mode: 'Markdown'});
        });

        // Handle errors
        bot.on('polling_error', (error) => {
            console.error('‚ùå Polling error:', error.message);
        });

        bot.on('error', (error) => {
            console.error('‚ùå Bot error:', error.message);
        });

        console.log('‚úÖ Bot initialized and running!');
        console.log('‚úÖ Database ready for Story Protocol monitoring');
        console.log('üêã Whale monitoring system ready - REAL BLOCKCHAIN DATA ONLY');
        console.log('‚ö° No mock data - all alerts are from live transactions');
        console.log('Send /start to your bot to test it.');

    } catch (error) {
        console.error('‚ùå Failed to initialize bot:', error);
        process.exit(1);
    }
}

// Handle shutdown
process.on('SIGINT', async () => {
    console.log('\nüõë Shutting down bot...');

    if (storyMonitor) {
        storyMonitor.stopMonitoring();
    }

    if (whaleMonitor) {
        whaleMonitor.stopMonitoring();
    }

    if (db) {
        await db.close();
    }

    process.exit(0);
});

// Start the bot
initializeBot();